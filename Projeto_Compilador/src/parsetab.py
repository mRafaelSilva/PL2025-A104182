# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightELSEleftORleftANDrightNOTleftEQUALNEQUALLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEDIVMODrightUNARYAND ARRAY ASSIGN BEGIN BOOLEAN CHAR CHARLIT COLON COMMA COMMENT DIV DIVIDE DO DOT DOWNTO ELSE END EQUAL FALSE FOR FUNCTION GE GT ID IF INT INTEGER LBRACKET LE LENGTH LPAREN LT MINUS MOD NEQUAL NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET READ READLN REAL REALNUM REPEAT RPAREN SEMICOLON STRING STRINGTYPE THEN TIMES TO TRUE UNTIL VAR WHILE WRITE WRITELNprogram : PROGRAM ID SEMICOLON declarations compound_statement DOT\n               | PROGRAM ID SEMICOLON compound_statement DOTdeclarations : declarations declaration\n                   | declarationdeclaration : var_declaration\n                  | function_declaration\n                  | procedure_declarationvar_declaration : VAR var_listvar_list : var_list var_spec\n                | var_specvar_spec : id_list COLON type_spec SEMICOLONid_list : id_list COMMA ID\n               | IDtype_spec : INTEGER\n                 | REAL\n                 | BOOLEAN\n                 | CHAR\n                 | STRINGTYPE\n                 | array_typearray_type : ARRAY LBRACKET INT DOT DOT INT RBRACKET OF type_specfunction_declaration : function_header declarations compound_statement SEMICOLON\n                           | function_header compound_statement SEMICOLONfunction_header : FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON\n                      | FUNCTION ID COLON type_spec SEMICOLONprocedure_declaration : procedure_header declarations compound_statement SEMICOLON\n                            | procedure_header compound_statement SEMICOLONprocedure_header : PROCEDURE ID LPAREN param_list RPAREN SEMICOLON\n                       | PROCEDURE ID SEMICOLONparam_list : param_list SEMICOLON param_spec\n                  | param_specparam_spec : id_list COLON type_speccompound_statement : BEGIN statement_list ENDstatement_list : statement_list SEMICOLON statement\n                     | statement\n                     | emptystatement : assignment_statement\n                | procedure_call\n                | compound_statement\n                | if_statement\n                | while_statement\n                | for_statement\n                | repeat_statement\n                | write_statement\n                | read_statement\n                | emptyempty :assignment_statement : variable ASSIGN expr_boolvariable : ID\n                | ID LBRACKET expr_bool RBRACKETprocedure_call : ID LPAREN expression_list RPAREN\n                     | ID LPAREN RPAREN\n                     | IDif_statement : IF expr_bool THEN statement\n                   | IF expr_bool THEN statement ELSE statementwhile_statement : WHILE expr_bool DO statementfor_statement : FOR ID ASSIGN expr_bool TO expr_bool DO statement\n                    | FOR ID ASSIGN expr_bool DOWNTO expr_bool DO statementrepeat_statement : REPEAT statement_list UNTIL expr_boolwrite_statement : WRITE LPAREN expression_list RPAREN\n                      | WRITELN LPAREN expression_list RPAREN\n                      | WRITELN LPAREN RPAREN\n                      | WRITELNread_statement : READ LPAREN variable_list RPAREN\n                     | READLN LPAREN variable_list RPARENvariable_list : variable_list COMMA variable\n                    | variableexpression_list : expression_list COMMA expr_bool\n                      | expr_boolexpr_bool : expr\n                | expr op_rel exprop_rel : EQUAL\n             | NEQUAL\n             | LT\n             | LE\n             | GT\n             | GEexpr : termo\n           | expr op_ad termoop_ad : PLUS\n            | MINUS\n            | ORtermo : fator\n            | termo op_mul fatorop_mul : TIMES\n             | DIVIDE\n             | DIV\n             | MOD\n             | ANDfator : const\n            | variable\n            | LPAREN expr_bool RPAREN\n            | func_call\n            | PLUS fator %prec UNARY\n            | MINUS fator %prec UNARY\n            | NOT fatorconst : INT\n            | REALNUM\n            | STRING\n            | CHARLIT\n            | TRUE\n            | FALSEfunc_call : ID LPAREN expression_list RPAREN\n                | ID LPAREN RPAREN\n                | LENGTH LPAREN expr_bool RPAREN'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,52,],[0,-2,-1,]),'ID':([2,8,12,15,16,34,35,36,37,42,43,54,55,56,57,64,66,67,68,80,81,82,83,84,86,91,93,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,126,127,128,153,169,171,174,179,182,183,195,196,],[3,33,45,50,51,75,75,78,33,45,-10,33,75,75,75,75,75,75,75,75,75,134,134,-9,144,45,45,33,75,75,-71,-72,-73,-74,-75,-76,-79,-80,-81,75,-84,-85,-86,-87,-88,75,75,33,75,75,75,134,-11,45,33,75,75,33,33,]),'SEMICOLON':([3,8,20,21,22,23,24,25,26,27,28,29,30,31,33,37,39,47,49,51,53,54,59,60,61,62,63,65,69,70,71,72,73,74,75,79,87,89,95,96,97,99,102,121,122,123,126,131,136,137,138,139,140,141,142,147,148,150,151,152,154,155,156,157,158,159,161,163,165,166,167,168,170,177,179,180,181,187,188,190,194,195,196,199,200,204,],[4,-46,54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-46,-62,88,90,94,-32,-46,-69,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,54,145,146,-33,-45,-47,-51,-46,-93,-94,-95,-46,-61,171,-14,-15,-16,-17,-18,-19,174,-30,176,174,-50,-49,-53,-70,-78,-83,-91,-103,-55,-58,-59,-60,-63,-64,189,-46,-102,-104,-29,-31,-54,198,-46,-46,-56,-57,-20,]),'BEGIN':([4,5,7,8,9,10,11,13,14,18,37,42,43,46,48,54,84,88,90,94,102,126,145,146,171,176,179,189,195,196,198,],[8,8,-4,8,-5,-6,-7,8,8,-3,8,-8,-10,8,8,8,-9,-22,-26,-28,8,8,-21,-25,-11,-24,8,-27,8,8,-23,]),'VAR':([4,5,7,9,10,11,13,14,18,42,43,46,48,84,88,90,94,145,146,171,176,189,198,],[12,12,-4,-5,-6,-7,12,12,-3,-8,-10,12,12,-9,-22,-26,-28,-21,-25,-11,-24,-27,-23,]),'FUNCTION':([4,5,7,9,10,11,13,14,18,42,43,46,48,84,88,90,94,145,146,171,176,189,198,],[15,15,-4,-5,-6,-7,15,15,-3,-8,-10,15,15,-9,-22,-26,-28,-21,-25,-11,-24,-27,-23,]),'PROCEDURE':([4,5,7,9,10,11,13,14,18,42,43,46,48,84,88,90,94,145,146,171,176,189,198,],[16,16,-4,-5,-6,-7,16,16,-3,-8,-10,16,16,-9,-22,-26,-28,-21,-25,-11,-24,-27,-23,]),'DOT':([6,17,53,185,193,],[19,52,-32,193,197,]),'END':([8,20,21,22,23,24,25,26,27,28,29,30,31,33,39,53,54,59,60,61,62,63,65,69,70,71,72,73,74,75,95,96,97,99,102,121,122,123,126,131,152,154,155,156,157,158,159,161,163,165,166,167,168,170,179,180,181,190,195,196,199,200,],[-46,53,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-62,-32,-46,-69,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-33,-45,-47,-51,-46,-93,-94,-95,-46,-61,-50,-49,-53,-70,-78,-83,-91,-103,-55,-58,-59,-60,-63,-64,-46,-102,-104,-54,-46,-46,-56,-57,]),'IF':([8,37,54,102,126,179,195,196,],[34,34,34,34,34,34,34,34,]),'WHILE':([8,37,54,102,126,179,195,196,],[35,35,35,35,35,35,35,35,]),'FOR':([8,37,54,102,126,179,195,196,],[36,36,36,36,36,36,36,36,]),'REPEAT':([8,37,54,102,126,179,195,196,],[37,37,37,37,37,37,37,37,]),'WRITE':([8,37,54,102,126,179,195,196,],[38,38,38,38,38,38,38,38,]),'WRITELN':([8,37,54,102,126,179,195,196,],[39,39,39,39,39,39,39,39,]),'READ':([8,37,54,102,126,179,195,196,],[40,40,40,40,40,40,40,40,]),'READLN':([8,37,54,102,126,179,195,196,],[41,41,41,41,41,41,41,41,]),'UNTIL':([21,22,23,24,25,26,27,28,29,30,31,33,37,39,53,54,59,60,61,62,63,65,69,70,71,72,73,74,75,79,95,96,97,99,102,121,122,123,126,131,152,154,155,156,157,158,159,161,163,165,166,167,168,170,179,180,181,190,195,196,199,200,],[-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-46,-62,-32,-46,-69,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,128,-33,-45,-47,-51,-46,-93,-94,-95,-46,-61,-50,-49,-53,-70,-78,-83,-91,-103,-55,-58,-59,-60,-63,-64,-46,-102,-104,-54,-46,-46,-56,-57,]),'ELSE':([23,24,25,26,27,28,29,30,31,33,39,53,59,60,61,62,63,65,69,70,71,72,73,74,75,96,97,99,102,121,122,123,126,131,152,154,155,156,157,158,159,161,163,165,166,167,168,170,179,180,181,190,195,196,199,200,],[-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-62,-32,-69,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-45,-47,-51,-46,-93,-94,-95,-46,-61,-50,-49,179,-70,-78,-83,-91,-103,-55,-58,-59,-60,-63,-64,-46,-102,-104,-54,-46,-46,-56,-57,]),'ASSIGN':([32,33,78,154,],[55,-48,127,-49,]),'LPAREN':([33,34,35,38,39,40,41,50,51,55,56,57,64,66,67,68,75,76,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,127,128,153,182,183,],[56,64,64,80,81,82,83,91,93,64,64,64,64,64,64,64,124,125,64,64,64,64,-71,-72,-73,-74,-75,-76,-79,-80,-81,64,-84,-85,-86,-87,-88,64,64,64,64,64,64,64,]),'LBRACKET':([33,75,134,143,],[57,57,57,172,]),'PLUS':([34,35,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,123,124,125,127,128,153,154,156,157,158,159,161,180,181,182,183,],[66,66,66,66,66,111,-77,-82,-89,-90,66,-92,66,66,66,-96,-97,-98,-99,-100,-101,-48,66,66,66,66,-71,-72,-73,-74,-75,-76,-79,-80,-81,66,-84,-85,-86,-87,-88,-93,-94,-95,66,66,66,66,66,-49,111,-78,-83,-91,-103,-102,-104,66,66,]),'MINUS':([34,35,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,121,122,123,124,125,127,128,153,154,156,157,158,159,161,180,181,182,183,],[67,67,67,67,67,112,-77,-82,-89,-90,67,-92,67,67,67,-96,-97,-98,-99,-100,-101,-48,67,67,67,67,-71,-72,-73,-74,-75,-76,-79,-80,-81,67,-84,-85,-86,-87,-88,-93,-94,-95,67,67,67,67,67,-49,112,-78,-83,-91,-103,-102,-104,67,67,]),'NOT':([34,35,55,56,57,64,66,67,68,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,127,128,153,182,183,],[68,68,68,68,68,68,68,68,68,68,68,68,68,-71,-72,-73,-74,-75,-76,-79,-80,-81,68,-84,-85,-86,-87,-88,68,68,68,68,68,68,68,]),'INT':([34,35,55,56,57,64,66,67,68,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,127,128,153,172,182,183,197,],[69,69,69,69,69,69,69,69,69,69,69,69,69,-71,-72,-73,-74,-75,-76,-79,-80,-81,69,-84,-85,-86,-87,-88,69,69,69,69,69,185,69,69,201,]),'REALNUM':([34,35,55,56,57,64,66,67,68,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,127,128,153,182,183,],[70,70,70,70,70,70,70,70,70,70,70,70,70,-71,-72,-73,-74,-75,-76,-79,-80,-81,70,-84,-85,-86,-87,-88,70,70,70,70,70,70,70,]),'STRING':([34,35,55,56,57,64,66,67,68,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,127,128,153,182,183,],[71,71,71,71,71,71,71,71,71,71,71,71,71,-71,-72,-73,-74,-75,-76,-79,-80,-81,71,-84,-85,-86,-87,-88,71,71,71,71,71,71,71,]),'CHARLIT':([34,35,55,56,57,64,66,67,68,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,127,128,153,182,183,],[72,72,72,72,72,72,72,72,72,72,72,72,72,-71,-72,-73,-74,-75,-76,-79,-80,-81,72,-84,-85,-86,-87,-88,72,72,72,72,72,72,72,]),'TRUE':([34,35,55,56,57,64,66,67,68,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,127,128,153,182,183,],[73,73,73,73,73,73,73,73,73,73,73,73,73,-71,-72,-73,-74,-75,-76,-79,-80,-81,73,-84,-85,-86,-87,-88,73,73,73,73,73,73,73,]),'FALSE':([34,35,55,56,57,64,66,67,68,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,127,128,153,182,183,],[74,74,74,74,74,74,74,74,74,74,74,74,74,-71,-72,-73,-74,-75,-76,-79,-80,-81,74,-84,-85,-86,-87,-88,74,74,74,74,74,74,74,]),'LENGTH':([34,35,55,56,57,64,66,67,68,80,81,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,127,128,153,182,183,],[76,76,76,76,76,76,76,76,76,76,76,76,76,-71,-72,-73,-74,-75,-76,-79,-80,-81,76,-84,-85,-86,-87,-88,76,76,76,76,76,76,76,]),'COLON':([44,45,50,144,149,173,],[85,-13,92,-12,175,186,]),'COMMA':([44,45,59,60,61,62,63,65,69,70,71,72,73,74,75,98,100,121,122,123,129,130,132,133,134,135,144,149,154,156,157,158,159,160,161,178,180,181,184,],[86,-13,-69,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,153,-68,-93,-94,-95,153,153,169,-66,-48,169,-12,86,-49,-70,-78,-83,-91,153,-103,-67,-102,-104,-65,]),'RPAREN':([56,59,60,61,62,63,65,69,70,71,72,73,74,75,81,98,100,120,121,122,123,124,129,130,132,133,134,135,137,138,139,140,141,142,147,148,151,154,156,157,158,159,160,161,162,178,180,181,184,187,188,204,],[99,-69,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,131,152,-68,159,-93,-94,-95,161,166,167,168,-66,-48,170,-14,-15,-16,-17,-18,-19,173,-30,177,-49,-70,-78,-83,-91,180,-103,181,-67,-102,-104,-65,-29,-31,-20,]),'THEN':([58,59,60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,156,157,158,159,161,180,181,],[102,-69,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,-70,-78,-83,-91,-103,-102,-104,]),'DO':([59,60,61,62,63,65,69,70,71,72,73,74,75,77,121,122,123,154,156,157,158,159,161,180,181,191,192,],[-69,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,126,-93,-94,-95,-49,-70,-78,-83,-91,-103,-102,-104,195,196,]),'RBRACKET':([59,60,61,62,63,65,69,70,71,72,73,74,75,101,121,122,123,154,156,157,158,159,161,180,181,201,],[-69,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,154,-93,-94,-95,-49,-70,-78,-83,-91,-103,-102,-104,202,]),'TO':([59,60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,156,157,158,159,161,164,180,181,],[-69,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,-70,-78,-83,-91,-103,182,-102,-104,]),'DOWNTO':([59,60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,156,157,158,159,161,164,180,181,],[-69,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,-70,-78,-83,-91,-103,183,-102,-104,]),'EQUAL':([59,60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,157,158,159,161,180,181,],[105,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,-78,-83,-91,-103,-102,-104,]),'NEQUAL':([59,60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,157,158,159,161,180,181,],[106,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,-78,-83,-91,-103,-102,-104,]),'LT':([59,60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,157,158,159,161,180,181,],[107,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,-78,-83,-91,-103,-102,-104,]),'LE':([59,60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,157,158,159,161,180,181,],[108,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,-78,-83,-91,-103,-102,-104,]),'GT':([59,60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,157,158,159,161,180,181,],[109,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,-78,-83,-91,-103,-102,-104,]),'GE':([59,60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,157,158,159,161,180,181,],[110,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,-78,-83,-91,-103,-102,-104,]),'OR':([59,60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,156,157,158,159,161,180,181,],[113,-77,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,113,-78,-83,-91,-103,-102,-104,]),'TIMES':([60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,157,158,159,161,180,181,],[115,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,115,-83,-91,-103,-102,-104,]),'DIVIDE':([60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,157,158,159,161,180,181,],[116,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,116,-83,-91,-103,-102,-104,]),'DIV':([60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,157,158,159,161,180,181,],[117,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,117,-83,-91,-103,-102,-104,]),'MOD':([60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,157,158,159,161,180,181,],[118,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,118,-83,-91,-103,-102,-104,]),'AND':([60,61,62,63,65,69,70,71,72,73,74,75,121,122,123,154,157,158,159,161,180,181,],[119,-82,-89,-90,-92,-96,-97,-98,-99,-100,-101,-48,-93,-94,-95,-49,119,-83,-91,-103,-102,-104,]),'INTEGER':([85,92,175,186,203,],[137,137,137,137,137,]),'REAL':([85,92,175,186,203,],[138,138,138,138,138,]),'BOOLEAN':([85,92,175,186,203,],[139,139,139,139,139,]),'CHAR':([85,92,175,186,203,],[140,140,140,140,140,]),'STRINGTYPE':([85,92,175,186,203,],[141,141,141,141,141,]),'ARRAY':([85,92,175,186,203,],[143,143,143,143,143,]),'OF':([202,],[203,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([4,13,14,],[5,46,48,]),'compound_statement':([4,5,8,13,14,37,46,48,54,102,126,179,195,196,],[6,17,25,47,49,25,87,89,25,25,25,25,25,25,]),'declaration':([4,5,13,14,46,48,],[7,18,7,7,18,18,]),'var_declaration':([4,5,13,14,46,48,],[9,9,9,9,9,9,]),'function_declaration':([4,5,13,14,46,48,],[10,10,10,10,10,10,]),'procedure_declaration':([4,5,13,14,46,48,],[11,11,11,11,11,11,]),'function_header':([4,5,13,14,46,48,],[13,13,13,13,13,13,]),'procedure_header':([4,5,13,14,46,48,],[14,14,14,14,14,14,]),'statement_list':([8,37,],[20,79,]),'statement':([8,37,54,102,126,179,195,196,],[21,21,95,155,163,190,199,200,]),'empty':([8,37,54,102,126,179,195,196,],[22,22,96,96,96,96,96,96,]),'assignment_statement':([8,37,54,102,126,179,195,196,],[23,23,23,23,23,23,23,23,]),'procedure_call':([8,37,54,102,126,179,195,196,],[24,24,24,24,24,24,24,24,]),'if_statement':([8,37,54,102,126,179,195,196,],[26,26,26,26,26,26,26,26,]),'while_statement':([8,37,54,102,126,179,195,196,],[27,27,27,27,27,27,27,27,]),'for_statement':([8,37,54,102,126,179,195,196,],[28,28,28,28,28,28,28,28,]),'repeat_statement':([8,37,54,102,126,179,195,196,],[29,29,29,29,29,29,29,29,]),'write_statement':([8,37,54,102,126,179,195,196,],[30,30,30,30,30,30,30,30,]),'read_statement':([8,37,54,102,126,179,195,196,],[31,31,31,31,31,31,31,31,]),'variable':([8,34,35,37,54,55,56,57,64,66,67,68,80,81,82,83,102,103,104,114,124,125,126,127,128,153,169,179,182,183,195,196,],[32,63,63,32,32,63,63,63,63,63,63,63,63,63,133,133,32,63,63,63,63,63,32,63,63,63,184,32,63,63,32,32,]),'var_list':([12,],[42,]),'var_spec':([12,42,],[43,84,]),'id_list':([12,42,91,93,174,],[44,44,149,149,149,]),'expr_bool':([34,35,55,56,57,64,80,81,124,125,127,128,153,182,183,],[58,77,97,100,101,120,100,100,100,162,164,165,178,191,192,]),'expr':([34,35,55,56,57,64,80,81,103,124,125,127,128,153,182,183,],[59,59,59,59,59,59,59,59,156,59,59,59,59,59,59,59,]),'termo':([34,35,55,56,57,64,80,81,103,104,124,125,127,128,153,182,183,],[60,60,60,60,60,60,60,60,60,157,60,60,60,60,60,60,60,]),'fator':([34,35,55,56,57,64,66,67,68,80,81,103,104,114,124,125,127,128,153,182,183,],[61,61,61,61,61,61,121,122,123,61,61,61,61,158,61,61,61,61,61,61,61,]),'const':([34,35,55,56,57,64,66,67,68,80,81,103,104,114,124,125,127,128,153,182,183,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'func_call':([34,35,55,56,57,64,66,67,68,80,81,103,104,114,124,125,127,128,153,182,183,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'expression_list':([56,80,81,124,],[98,129,130,160,]),'op_rel':([59,],[103,]),'op_ad':([59,156,],[104,104,]),'op_mul':([60,157,],[114,114,]),'variable_list':([82,83,],[132,135,]),'type_spec':([85,92,175,186,203,],[136,150,188,194,204,]),'array_type':([85,92,175,186,203,],[142,142,142,142,142,]),'param_list':([91,93,],[147,151,]),'param_spec':([91,93,174,],[148,148,187,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declarations compound_statement DOT','program',6,'p_program','pascal_sin.py',27),
  ('program -> PROGRAM ID SEMICOLON compound_statement DOT','program',5,'p_program','pascal_sin.py',28),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','pascal_sin.py',38),
  ('declarations -> declaration','declarations',1,'p_declarations','pascal_sin.py',39),
  ('declaration -> var_declaration','declaration',1,'p_declaration','pascal_sin.py',46),
  ('declaration -> function_declaration','declaration',1,'p_declaration','pascal_sin.py',47),
  ('declaration -> procedure_declaration','declaration',1,'p_declaration','pascal_sin.py',48),
  ('var_declaration -> VAR var_list','var_declaration',2,'p_var_declaration','pascal_sin.py',53),
  ('var_list -> var_list var_spec','var_list',2,'p_var_list','pascal_sin.py',57),
  ('var_list -> var_spec','var_list',1,'p_var_list','pascal_sin.py',58),
  ('var_spec -> id_list COLON type_spec SEMICOLON','var_spec',4,'p_var_spec','pascal_sin.py',65),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','pascal_sin.py',69),
  ('id_list -> ID','id_list',1,'p_id_list','pascal_sin.py',70),
  ('type_spec -> INTEGER','type_spec',1,'p_type_spec','pascal_sin.py',78),
  ('type_spec -> REAL','type_spec',1,'p_type_spec','pascal_sin.py',79),
  ('type_spec -> BOOLEAN','type_spec',1,'p_type_spec','pascal_sin.py',80),
  ('type_spec -> CHAR','type_spec',1,'p_type_spec','pascal_sin.py',81),
  ('type_spec -> STRINGTYPE','type_spec',1,'p_type_spec','pascal_sin.py',82),
  ('type_spec -> array_type','type_spec',1,'p_type_spec','pascal_sin.py',83),
  ('array_type -> ARRAY LBRACKET INT DOT DOT INT RBRACKET OF type_spec','array_type',9,'p_array_type','pascal_sin.py',87),
  ('function_declaration -> function_header declarations compound_statement SEMICOLON','function_declaration',4,'p_function_declaration','pascal_sin.py',94),
  ('function_declaration -> function_header compound_statement SEMICOLON','function_declaration',3,'p_function_declaration','pascal_sin.py',95),
  ('function_header -> FUNCTION ID LPAREN param_list RPAREN COLON type_spec SEMICOLON','function_header',8,'p_function_header','pascal_sin.py',102),
  ('function_header -> FUNCTION ID COLON type_spec SEMICOLON','function_header',5,'p_function_header','pascal_sin.py',103),
  ('procedure_declaration -> procedure_header declarations compound_statement SEMICOLON','procedure_declaration',4,'p_procedure_declaration','pascal_sin.py',110),
  ('procedure_declaration -> procedure_header compound_statement SEMICOLON','procedure_declaration',3,'p_procedure_declaration','pascal_sin.py',111),
  ('procedure_header -> PROCEDURE ID LPAREN param_list RPAREN SEMICOLON','procedure_header',6,'p_procedure_header','pascal_sin.py',118),
  ('procedure_header -> PROCEDURE ID SEMICOLON','procedure_header',3,'p_procedure_header','pascal_sin.py',119),
  ('param_list -> param_list SEMICOLON param_spec','param_list',3,'p_param_list','pascal_sin.py',126),
  ('param_list -> param_spec','param_list',1,'p_param_list','pascal_sin.py',127),
  ('param_spec -> id_list COLON type_spec','param_spec',3,'p_param_spec','pascal_sin.py',134),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','pascal_sin.py',141),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','pascal_sin.py',145),
  ('statement_list -> statement','statement_list',1,'p_statement_list','pascal_sin.py',146),
  ('statement_list -> empty','statement_list',1,'p_statement_list','pascal_sin.py',147),
  ('statement -> assignment_statement','statement',1,'p_statement','pascal_sin.py',160),
  ('statement -> procedure_call','statement',1,'p_statement','pascal_sin.py',161),
  ('statement -> compound_statement','statement',1,'p_statement','pascal_sin.py',162),
  ('statement -> if_statement','statement',1,'p_statement','pascal_sin.py',163),
  ('statement -> while_statement','statement',1,'p_statement','pascal_sin.py',164),
  ('statement -> for_statement','statement',1,'p_statement','pascal_sin.py',165),
  ('statement -> repeat_statement','statement',1,'p_statement','pascal_sin.py',166),
  ('statement -> write_statement','statement',1,'p_statement','pascal_sin.py',167),
  ('statement -> read_statement','statement',1,'p_statement','pascal_sin.py',168),
  ('statement -> empty','statement',1,'p_statement','pascal_sin.py',169),
  ('empty -> <empty>','empty',0,'p_empty','pascal_sin.py',173),
  ('assignment_statement -> variable ASSIGN expr_bool','assignment_statement',3,'p_assignment_statement','pascal_sin.py',178),
  ('variable -> ID','variable',1,'p_variable','pascal_sin.py',182),
  ('variable -> ID LBRACKET expr_bool RBRACKET','variable',4,'p_variable','pascal_sin.py',183),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','pascal_sin.py',191),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','pascal_sin.py',192),
  ('procedure_call -> ID','procedure_call',1,'p_procedure_call','pascal_sin.py',193),
  ('if_statement -> IF expr_bool THEN statement','if_statement',4,'p_if_statement','pascal_sin.py',205),
  ('if_statement -> IF expr_bool THEN statement ELSE statement','if_statement',6,'p_if_statement','pascal_sin.py',206),
  ('while_statement -> WHILE expr_bool DO statement','while_statement',4,'p_while_statement','pascal_sin.py',213),
  ('for_statement -> FOR ID ASSIGN expr_bool TO expr_bool DO statement','for_statement',8,'p_for_statement','pascal_sin.py',217),
  ('for_statement -> FOR ID ASSIGN expr_bool DOWNTO expr_bool DO statement','for_statement',8,'p_for_statement','pascal_sin.py',218),
  ('repeat_statement -> REPEAT statement_list UNTIL expr_bool','repeat_statement',4,'p_repeat_statement','pascal_sin.py',222),
  ('write_statement -> WRITE LPAREN expression_list RPAREN','write_statement',4,'p_write_statement','pascal_sin.py',229),
  ('write_statement -> WRITELN LPAREN expression_list RPAREN','write_statement',4,'p_write_statement','pascal_sin.py',230),
  ('write_statement -> WRITELN LPAREN RPAREN','write_statement',3,'p_write_statement','pascal_sin.py',231),
  ('write_statement -> WRITELN','write_statement',1,'p_write_statement','pascal_sin.py',232),
  ('read_statement -> READ LPAREN variable_list RPAREN','read_statement',4,'p_read_statement','pascal_sin.py',241),
  ('read_statement -> READLN LPAREN variable_list RPAREN','read_statement',4,'p_read_statement','pascal_sin.py',242),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','pascal_sin.py',246),
  ('variable_list -> variable','variable_list',1,'p_variable_list','pascal_sin.py',247),
  ('expression_list -> expression_list COMMA expr_bool','expression_list',3,'p_expression_list','pascal_sin.py',254),
  ('expression_list -> expr_bool','expression_list',1,'p_expression_list','pascal_sin.py',255),
  ('expr_bool -> expr','expr_bool',1,'p_expr_bool','pascal_sin.py',267),
  ('expr_bool -> expr op_rel expr','expr_bool',3,'p_expr_bool','pascal_sin.py',268),
  ('op_rel -> EQUAL','op_rel',1,'p_op_rel','pascal_sin.py',275),
  ('op_rel -> NEQUAL','op_rel',1,'p_op_rel','pascal_sin.py',276),
  ('op_rel -> LT','op_rel',1,'p_op_rel','pascal_sin.py',277),
  ('op_rel -> LE','op_rel',1,'p_op_rel','pascal_sin.py',278),
  ('op_rel -> GT','op_rel',1,'p_op_rel','pascal_sin.py',279),
  ('op_rel -> GE','op_rel',1,'p_op_rel','pascal_sin.py',280),
  ('expr -> termo','expr',1,'p_expr','pascal_sin.py',285),
  ('expr -> expr op_ad termo','expr',3,'p_expr','pascal_sin.py',286),
  ('op_ad -> PLUS','op_ad',1,'p_op_ad','pascal_sin.py',293),
  ('op_ad -> MINUS','op_ad',1,'p_op_ad','pascal_sin.py',294),
  ('op_ad -> OR','op_ad',1,'p_op_ad','pascal_sin.py',295),
  ('termo -> fator','termo',1,'p_termo','pascal_sin.py',300),
  ('termo -> termo op_mul fator','termo',3,'p_termo','pascal_sin.py',301),
  ('op_mul -> TIMES','op_mul',1,'p_op_mul','pascal_sin.py',308),
  ('op_mul -> DIVIDE','op_mul',1,'p_op_mul','pascal_sin.py',309),
  ('op_mul -> DIV','op_mul',1,'p_op_mul','pascal_sin.py',310),
  ('op_mul -> MOD','op_mul',1,'p_op_mul','pascal_sin.py',311),
  ('op_mul -> AND','op_mul',1,'p_op_mul','pascal_sin.py',312),
  ('fator -> const','fator',1,'p_fator','pascal_sin.py',317),
  ('fator -> variable','fator',1,'p_fator','pascal_sin.py',318),
  ('fator -> LPAREN expr_bool RPAREN','fator',3,'p_fator','pascal_sin.py',319),
  ('fator -> func_call','fator',1,'p_fator','pascal_sin.py',320),
  ('fator -> PLUS fator','fator',2,'p_fator','pascal_sin.py',321),
  ('fator -> MINUS fator','fator',2,'p_fator','pascal_sin.py',322),
  ('fator -> NOT fator','fator',2,'p_fator','pascal_sin.py',323),
  ('const -> INT','const',1,'p_const','pascal_sin.py',333),
  ('const -> REALNUM','const',1,'p_const','pascal_sin.py',334),
  ('const -> STRING','const',1,'p_const','pascal_sin.py',335),
  ('const -> CHARLIT','const',1,'p_const','pascal_sin.py',336),
  ('const -> TRUE','const',1,'p_const','pascal_sin.py',337),
  ('const -> FALSE','const',1,'p_const','pascal_sin.py',338),
  ('func_call -> ID LPAREN expression_list RPAREN','func_call',4,'p_func_call','pascal_sin.py',343),
  ('func_call -> ID LPAREN RPAREN','func_call',3,'p_func_call','pascal_sin.py',344),
  ('func_call -> LENGTH LPAREN expr_bool RPAREN','func_call',4,'p_func_call','pascal_sin.py',345),
]
